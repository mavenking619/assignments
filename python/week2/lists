my_list = list(range(100))
print(type(my_list))

my_list.append(100)
print(my_list[-1])
last_item = my_list.pop()
print(last_item)

my_list.reverse()
print(my_list[:5])

print(my_list.count(50))


my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
my_list = my_list[-3:] + my_list[:-3]
print(my_list)


len([[1, 2]] * 3) == 3
print(len([[1, 2]] * 3))


my_list_ten = [1, 2, 3, 2, 1, "hello", "hello", [9,9], [9,9], [9,9]]


my_list_ten_mem = [id(item) for item in my_list_ten]

print("my_list_ten:", my_list_ten)
print("my_list_ten_mem:", my_list_ten_mem)



from collections import Counter

counts = Counter(my_list_ten_mem)


for addr, cnt in counts.items():
    print(f"Address {addr} appears {cnt} time(s).")


addr_to_values = {}
for item, addr in zip(my_list_ten, my_list_ten_mem):
    addr_to_values.setdefault(addr, []).append(item)

for addr, vals in addr_to_values.items():
    print(f"Address {addr} corresponds to values: {vals}")

del my_list_ten
print(my_list_ten)


print("what i observed is mutable values like lists are created as unique objects in memory, even if their content is the same. So, each [9, 9] in both lists has a distinct memory address")


import copy

x = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
y = copy.deepcopy(x)


print("Yes, you can use more than one expression in a list comprehension, like:")

result = [i * j for i in range(3) for j in range(3)]

statement = "To be, or not to be, this is the question"
space_count = len([char for char in statement if char == ' '])
print(space_count)
